---
title: "ggplot-practice"
format: html
editor_options: 
  chunk_output_type: console
---

load packages
```{r}
library(tidyverse)
library(here)
library(janitor)
```

## ggplot basics

read in clean lizard data
```{r}
lizards <- read_csv(here("data_tidy", "lizards.csv"))
```

### the essentials

 - data
 - aesthetics
 - geometry
 
```{r}
# ggplot essentials, 3 ways
# the regular way
ggplot(data = lizards, aes(x = total_length, y = weight)) + # 1 (data) and 2 (aesthetics)
  geom_point() # 3 (geometry)

# different syntax, if you layer different variables this way makes that easy
ggplot(data = lizards) +
  geom_point(aes(x = total_length, y = weight))

# most flexible
ggplot() +
  geom_point(data = lizards, aes(x = total_length, y = weight))
```

swap out geometry
```{r}
ggplot(data = lizards, aes(x = total_length, y = weight)) + 
  geom_line()
```

some geometry types only need on axis
```{r}
ggplot(data = lizards, aes(x = total_length)) +
  geom_histogram()
```

jitterplots usually are best with one categorical and one continuous variable
```{r}
ggplot(data = lizards, aes(x = weight, y = common_name)) +
  geom_jitter()
```

## aesthetic mapping
### updating based on a constant value
don't need to use the `aes()` function!

```{r}
ggplot(data = lizards, aes(x = weight)) +
  geom_histogram(color = "orange",
                 fill = "purple",
                 alpha = 0.5,
                 linetype = "dotted")
```

## updating aesthetics based on variables
in that case, we need to use the `aes()` function
```{r}
ggplot(data = lizards, aes(x = total_length, y = weight)) +
  geom_point(aes(color = common_name),
             alpha = 0.3)
```

# themes
## update axis labels
```{r}
ggplot(data = lizards, aes(x = weight, y = site)) +
  geom_jitter(aes(color = common_name)) +
  theme_minimal() +
  labs(x = "Weight (g)",
       y = "Study Site",
       title = "Lizard Weights Across Sites at Jornada",
       color = "Species")
```

## reorder data
```{r}
lizard_counts <- lizards %>% 
  count(common_name)

ggplot(data = lizard_counts, aes(x = n, y = fct_reorder(common_name, n))) +
  geom_col() +
  labs(x = "individuals",
       y = "species common name")


```

