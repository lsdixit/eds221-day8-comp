---
title: "ggplot-practice"
format: html
editor_options: 
  chunk_output_type: console
---

load packages
```{r}
library(tidyverse)
library(here)
library(janitor)
library(paletteer)
library(patchwork)
```

## ggplot basics

read in clean lizard data
```{r}
lizards <- read_csv(here("data_tidy", "lizards.csv"))
```

### the essentials

 - data
 - aesthetics
 - geometry
 
```{r}
# ggplot essentials, 3 ways
# the regular way
ggplot(data = lizards, aes(x = total_length, y = weight)) + # 1 (data) and 2 (aesthetics)
  geom_point() # 3 (geometry)

# different syntax, if you layer different variables this way makes that easy
ggplot(data = lizards) +
  geom_point(aes(x = total_length, y = weight))

# most flexible
ggplot() +
  geom_point(data = lizards, aes(x = total_length, y = weight))
```

swap out geometry
```{r}
ggplot(data = lizards, aes(x = total_length, y = weight)) + 
  geom_line()
```

some geometry types only need on axis
```{r}
ggplot(data = lizards, aes(x = total_length)) +
  geom_histogram()
```

jitterplots usually are best with one categorical and one continuous variable
```{r}
ggplot(data = lizards, aes(x = weight, y = common_name)) +
  geom_jitter()
```

## aesthetic mapping
### updating based on a constant value
don't need to use the `aes()` function!

```{r}
ggplot(data = lizards, aes(x = weight)) +
  geom_histogram(color = "orange",
                 fill = "purple",
                 alpha = 0.5,
                 linetype = "dotted")
```

## updating aesthetics based on variables
in that case, we need to use the `aes()` function
```{r}
ggplot(data = lizards, aes(x = total_length, y = weight)) +
  geom_point(aes(color = common_name),
             alpha = 0.3)
```

# themes
## update axis labels
```{r}
ggplot(data = lizards, aes(x = weight, y = site)) +
  geom_jitter(aes(color = common_name)) +
  theme_minimal() +
  labs(x = "Weight (g)",
       y = "Study Site",
       title = "Lizard Weights Across Sites at Jornada",
       color = "Species")
```

## reorder data
```{r}
lizard_counts <- lizards %>% 
  count(common_name)

ggplot(data = lizard_counts, aes(x = n, y = fct_reorder(common_name, n))) +
  geom_col() +
  labs(x = "individuals",
       y = "species common name")
```

## advanced ggplot customization
```{r}
ggplot(data = lizards, aes(x = total_length, y = weight)) +
  geom_point() +
  scale_x_continuous(breaks = c(0, 250, 500),
                     limits = c(0, 500)) +
  scale_y_continuous(breaks = seq(from = 0, to = 70, by = 10),
                     limits = c(0, 70)) +
  labs(x = "Total length (mm)",
       y = "Weight (g)") +
  theme_classic()
```

log scale
```{r}
ggplot(data = lizards, aes(x = total_length, y = weight)) +
  geom_point() +
  scale_x_log10()
```

count of lizards caught per day
```{r}
lizard_counts <- lizards %>% 
  mutate(date = lubridate::mdy(date)) %>% 
  count(date)

ggplot(data = lizard_counts, aes(x = date, y = n)) +
  geom_line() +
  scale_x_date(breaks = scales::breaks_width("2 years"),
               labels = scales::label_date("%Y"))
```

### customization of aesthetics with `scale_` functions
```{r}
# color gradient with 2 colors
ggplot(data = lizards, aes(x = total_length, y = weight)) +
  geom_point(aes(color = weight)) +
  scale_color_gradient(low = "red", high = "navy")

# color gradient with more than 2 colors
ggplot(data = lizards, aes(x = total_length, y = weight)) +
  geom_point(aes(color = weight)) +
  scale_color_gradientn(colors = c("orange", "red", "purple", "navy", "black"))

```

Gradient of color bins
```{r}
ggplot(data = lizards, aes(x = total_length, y = weight)) +
  geom_point(aes(color = weight)) +
  scale_color_steps(low = "red", high = "navy",
                    breaks = seq(0,80, by = 5))
```

```{r}
ggplot(data = lizards, aes(x = common_name, y = total_length)) +
  geom_boxplot(aes(fill = common_name),
               show.legend = FALSE) +
  coord_flip()
```

```{r}
lizards_mean <- lizards %>% 
  mutate(common_name = fct_reorder(common_name, 
                                   total_length, 
                                   .fun = median))

ggplot(data = lizards_mean, aes(y = common_name, x = total_length)) +
  geom_boxplot(aes(fill = common_name), show.legend = FALSE) + 
  scale_fill_paletteer_d(`"PNWColors::Sunset"`) +
  labs(x = "Total Length (mm)",
       y = "Species") +
  theme_minimal() +
  theme(panel.grid.minor = element_blank())
```

# patchwork package to create compound figures
```{r}
# saving plots as objects 
p1 <- ggplot(data = lizards_mean, aes(y = common_name, x = total_length)) +
  geom_boxplot(aes(fill = common_name), show.legend = FALSE) + 
  scale_fill_paletteer_d(`"PNWColors::Sunset"`) +
  labs(x = "Total Length (mm)",
       y = "Species") +
  theme_minimal() +
  theme(panel.grid.minor = element_blank())

p2 <- ggplot(data = lizards, aes(x = total_length, y = weight)) +
  geom_point(aes(color = weight)) +
  scale_color_steps(low = "red", high = "navy",
                    breaks = seq(0,80, by = 5))

```

```{r}
# "|" puts plots next to each other
(p1 | p2) & theme_minimal()
# "/" puts plots on top of each other
(p1 / p2) & theme_minimal()

# combinations of next to and on top of each other
p3 <- (p1 | p2) / (p2) & theme_minimal()
p3

ggsave("test.png", p3)
```

